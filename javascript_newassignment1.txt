1. Write a JS program to create object of person with fields as follows:-
fname - string
lname - string
age - int
skills - array
address - object
	city - string
	pincode - int
dateOfBirth - Date
married - Boolean
profession - string

Create minimum 2 objects and display the object's detail uisng global print method.


    function person(fname,lname,age,skills,dateofbirth,address,married,profession)
          {
	   this.fname=fname;
	   this.lname=lname;
	   this.age=age;
	   this.skills=skills;
	  this.dateofbirth=dateofbirth;
	  this.address=address;
	  this.married=married;
	  this.profession=profession;
	 }

   person1=new person("nikhil","goud",22,["c"],"24/10/1996",{city:"hyderabad",pincode:"500038"},"false","analyst");
   person1=new person("harish","chinna",22,["java"],"08/06/1996","false","sr.analyst");
   address=new address("hyderabad",500108);
   print=function()
    {
   console.log(person1);
   console.log(person2);
    }();



2. Modify the above program to create 2 objects, amitabh and abhishek, here abhishek has some common properties from amitabh, try to use it such common properties from amitabh instead of creating it in abhishek.

function person(fname,lname,age,skills,dateofbirth,address,married,profession)
 	{
	this.fname=fname;
	this.lname=lname;
	this.age=age;
	this.skills=skills;
	this.dateofbirth=dateofbirth;
	this.address=address;
	this.married=married;
	this.profession=profession;
        }

  amitabh=new person("amitabh","bachan",22,["c"],"24/10/1996",{city:"hyderabad",pincode:"500038"},"false","analyst");
  var abhishek=Object.create(amitabh);
  abhishek=new person("abhishek","22,"java","08/06/1996","false","sr.analyst");
  print=function()
   {
  console.log(amitabh);
  console.log(abhishek.lname);
  console.log(abhishek.address);
  }();




3. Modify the above code to create third object as "Aaradhya", this object shares the common properties from amitabh as well as abhishek accordingly demostrate on your own.


function person(fname,lname,age,skills,dateofbirth,address,married,profession)//creates a function with parameters
     {
	this.fname=fname;
	this.lname=lname;
	this.age=age;
	this.skills=skills;
	this.dateofbirth=dateofbirth;
	this.address=address;
	this.married=married;
	this.profession=profession;
   }

 var amithab=new person("amithab","bachan",50,["c++"],"24/10/1968",{city:"mumbai",pincode:502108},"false","analyst");
 var abhishek=Object.create(amithab);//creates abhishek as a new object and inherits amithab
 abhishek.fname="abhishek";
 var aaradhya=Object.create(abhishek);//creates aaradhya as a new object and inherits abhishek
 print=function()
  {
    console.log(amithab);
    console.log(abhishek);
    console.log(aaradhya.lname);
 }();
   
4. Create a JS program to implement below:-

	   BankAccount
		|(accountNumber)
		|(accountHolderName)
		|(accountBalance)
	-------------------------
	|			|
	Savings			Current
	    (isSalary)		     (odLimit)


Now, 
create 1 object of savings with accountNumber, accountHolderName, accountBalance and isSalary.
create 1 object of currrent with accountNumber, accountHolderName, accountBalance and odLimit.

use savings account object to call a function withdraw(amount), that will subtract the amount from the accountBalance, Note that accountBalance should not go below 0.

use current account object to calla function withdraw(amount), that will subtract the amount from the accountBalance, Note that accountBalance should not go below negative of odLimit.

Now, call getCurrentBalance() from both the object, that will return the accountBalance of the object used to call this method.




class BankAccount 
   {   
     constructor(accountNumber,accountHolderName,accountBalance)
	{
         this.accountNumber=accountNumber;
         this.accountHolderName=accountHolderName;
         this.accountBalance=accountBalance;
         this.print=function(){
         console.log(  this.accountNumber,this.accountHolderName,this.accountBalance);
         }
     }
     deposit(amount){
         this.accountBalance +=amount;
                 }
    }
class Savings extends BankAccount{
    constructor(accountNumber,accountHolderName,accountBalance,isSalary){
        super(accountNumber,accountHolderName,accountBalance);
        this.isSalary=isSalary;
        this.print=function(){
            console.log(this.accountNumber,this.accountHolderName,this.accountBalance,this.isSalary)
        }
    }
    withdraw(amount){
        if(this.accountBalance<parseInt(amount))
        {
            console.log("insufficient funds");
         }
        else{
            this.accountBalance -=amount;
         }
     }
    getaccountBalance(){
        console.log(this.accountBalance);
       }
    }
    class Current extends BankAccount{
    constructor(accountNumber,accountHolderName,accountBalance,odLimit){
    super(accountNumber,accountHolderName,accountBalance);
    this.odLimit=odLimit;
    this.print=function(){
    console.log(this.accountNumber,this.accountHolderName,this.accountBalance,this.odLimit)
         }
    }
    withdraw(amount){
    if(this.accountBalance+this.odLimit<parseInt(amount))
    {
        console.log("odLimit exceeded");
    }
    else{
        this.accountBalance -=amount;
    }
   }
    getaccountBalance(){
    console.log(this.accountBalance);
   }
   }
   var savings=new Savings(101,"Ajay",10000,true);
   var current=new Current(102,"Prashanth",2000,100000);
   savings.deposit(5000);
   savings.getaccountBalance();
   current.getaccountBalance();
   savings.withdraw(3000);
   savings.withdraw(3000);
   savings.getaccountBalance();
   savings.withdraw(5000);



5)In this assignment you will practice basic HTML, Javascript and CSS concepts
You are asked to build a page to order pizza! The page asks the user to enter information regarding the pizza order and then see a summary of what have been entered. The page is static HTML; however, part of the page will be dynamically built as it will be explained below.
 
Figure 1
The page consists of the following fields:
1. Customer Name & Email (Input fields)
2. Toppings Options (Check Boxes)
3. Delivery method (Radio Buttons)
4. Tip amount (Drop Down Menu), values are 15%, 20%, and 25%
5. Address (Text Area)
6. Action Buttons
7. Help Text (Text Area)
8. Summary of Order (Table)
All the fields are static fields except the last one (Summary Table) which is built based on the values entered by the user.
CSS is used to apply the following visual properties:
• Input fields width is 600px
• Font type: arial
• Font size: 80%
• Background: light gray (#eee)
• Margin: 20px
• Table even rows: background color light gray (#eee)
• Table odd rows: background color white (#fff)
• Table header row: background color black, font color white
This page should implement the following actions (see Figure 2):
1. The Help Text (Field # 1 in Figure 2) is responsible of showing a Hint message to
explaining information about the field that is currently focused (cursor is on the field).
If there is no focus on any field, display a default hint message. Messages are
displayed on (Table 1).
2. Submit Button should check that all fields are filled otherwise display an error
message indicating that there exist missing values.
3. Clear All: Clear All fields.
4. Show Summary: This button is initially disabled. It is enables only when submit
button is pressed and all fields values are valid. Clicking this button should build the Summary Table (see #2 in Figure 2). The table will summarize the pizza order based on what have been filled. The table should show:
• Customer Name
• Customer Email
• Customer Address
• Toppings selected
• Delivery option
• Total Price based on this formula: (base price + 1.5 * #of toppings + delivery fee)*1.0+tip. Where: base price= 10 and delivery is 5. For example, if 3 toppings are selected, delivery is NOT checked and 20% tip is selected, total is (10 + 1.5 * 3 + 0 ) * 1.2 = $17.4




HTML CODE:

  <!DOCTYPE html>
  <html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Pizza</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" media="screen" href="style.css" />
    <script src="pizza.js"></script>
    </head>
   <body bgcolor="lightgray" >
    <form name="frm" id="frm" onsubmit="return IsEmpty()">
       <div class="name">Name :
       <input type="text" id="name" onKeyup="checkform()" placeholder="Enter your Name..." required>
        </div>
        <div class="email">Email :
        <input type="text" id="email" onKeyup="checkform()" placeholder="Enter Email ID..." >
        </div>
        <div class="Toppings">
            <h4>Toppings :</h4>
            Extra cheese
            <input type="checkbox" id="ExtraCheese" value="Extra cheese"> Pepperoni
            <input type="checkbox" id="Pepperoni" value="Pepperoni"> Olives
            <input type="checkbox" id="Olives" value="Olives"> Pepper
            <input type="checkbox" id="Pepper" value="Pepper"> Bacon
            <input type="checkbox" id="Bacon" value="Bacon"> Tomatoes
            <input type="checkbox" id="Tomatoes" value="Tomatoes"> Mushrooms
            <input type="checkbox" id="Mushrooms" value="Mushrooms">
        </div>
        <div>
            <b>How do you want to get your pizza! </b>
            Delivery
            <input type="radio" name="delivery" id="delivery" value="Delivery"> Pickup
            <input type="radio" name="delivery" id="pickup" value="Pickup">
        </div>
        <div>
            <b>Tip ?</b>
            <select name="" id="tip">
                <option value="15">15%</option>
                <option value="20">20%</option>
                <option value="25">25%</option>
            </select>
            <hr>
        </div>
        <div class="Address">
            <p>
                <b style="margin: 0px">Address </b>
            </p>
            <textarea id="AddressText" required>
            </textarea>
            <br>
        </div>
        <div class="ActionButtons">
            <input id="submitbutton" type="submit" value="Submit">
            <input type="reset" value="Reset">
            <input type="button" onclick="tbl()" value="Show Summary">
        </div>
        <center><h1>Pizza Order Summary</h1></center>
   <center>
        <table id="Summary">
            <tr>
                <td>Name</td>
                <td id="tName"></td>
            </tr>
            <tr>
                <td>Email</td>
                <td id="tEmail"></td>
            </tr>
            <tr>
                <td>Address</td>
                <td id="tAddress"></td>
            </tr>
            <tr>
                <td>Toppings</td>
                <td id="tToppings"></td>
            </tr>
            <tr>
                <td>Delivery ?</td>
                <td id="tDelivery"></td>
            </tr>
            <tr>
                <td>Tip Amount</td>
                <td id="tTip"></td>
            </tr>
            <tr>
                <td>Total</td>
                <td id="tTotal"></td>
            </tr>
        </table>
  </center>
    </form>
 </body>
 </html>



CSS CODE:

     .name{
     margin: 5px;
     padding: 5px;
      }
   .email{
    margin: 5px;
    padding: 5px;
      }
   .Toppings{
    margin: 5px;
    padding: 5px;
      }
    input{
    padding: 5px;
    margin-right: 5px;
      }
    b{
    padding: 5px;
    margin: 5px;
     }
    textarea{
    width: 250px;
    height: 80px;
     }
   .Address{
    padding: 5px;
    margin: 5px;
      }
   .ActionButtons{
    padding: 5px;
    margin: 5px;
      }
  table, td {
    border: 1px solid black;
        border-collapse: collapse;
    }
  th, td {
    text-align: left;
    padding: 8px;
  }
  tr:nth-child(even) {background-color: #eee;}


JAVASCRIPT CODE:

     function isNumber(x) {
    var val = "^[a-zA-Z0-9]{,30}";
    alert("check");
    if (x.value.length == 0) {
        alert("message");
        return false;
         } 
    else {
        alert("true");
        return true;
       }
    }
    function IsEmpty() {
    if ( document.forms['frm']['name'].value === "") {
        alert("empty");
        return false;
        }
    return true;
    }
    function addRow() {
    var table = document.getElementById("Summary");
    var rowCount = table.rows.length;
    var row = table.insertRow(rowCount);
    var cell1 = row.insertCell(0);
    cell1.innerHTML = "cell 1 text";
    var cell2 = row.insertCell(1);
    cell2.innerHTML = "cell 2 text";
    console.log("table e");
     }
     function tbl() {
    var delivery = false;
    rate_value = '';
    if (document.getElementById('delivery').checked) {
        delivery = true;
    } 
    else if (document.getElementById('pickup').checked) {
        delivery = false;
    }
    var Toppings =[];
    if (document.getElementById("ExtraCheese").checked) {
        Toppings .push("Extra Cheese");
    }
    if (document.getElementById("Pepperoni").checked) {
        Toppings .push("Pepperoni");
    }
    if (document.getElementById("Olives").checked) {
        Toppings .push("Olives");
    }
    if (document.getElementById("Pepper").checked) {
        Toppings .push("Pepper");
    }
    if (document.getElementById("Bacon").checked) {
        Toppings .push("Bacon");
    }
    if (document.getElementById("Tomatoes").checked) {
        Toppings .push("Tomatoes");
    }
    if (document.getElementById("Mushrooms").checked) {
        Toppings .push("Mushrooms");
    }
    console.log(Toppings);
    for(i=0;i<Toppings.length;i++){
        insertRow(i,Toppings[i]);
    }
    document.getElementById("tName").innerHTML = document.getElementById("name").value;
    document.getElementById("tEmail").innerHTML = document.getElementById("email").value;
    document.getElementById("tAddress").innerHTML = document.getElementById("AddressText").value;
    document.getElementById("tDelivery").innerHTML = delivery;
    document.getElementById("tTip").innerHTML = document.getElementById("tip").value+" %";
    var basePrice=10;
    var deliveryCharge=0;
    if(delivery){
        deliveryCharge=5;
    }
    var tipPercent=document.getElementById("tip").value;
    var total=(basePrice + (1.5*Toppings.length) + deliveryCharge)*(1.0 + tipPercent/100);
    document.getElementById("tTotal").innerHTML =total;
      }
     function insertRow(i,Toppings){
    var table = document.getElementById("Summary");
    var nameRow = table.insertRow(i+4);
    var nameCell1 = nameRow.insertCell(0);
    nameCell1.innerHTML = "Toppings "+ ++i;
    var nameCell2 = nameRow.insertCell(1);
    nameCell2.innerHTML = Toppings;
      }
    function createTable() {
    var table = document.getElementById("Summary");
    var nameRow = table.insertRow(0);
    var nameCell1 = nameRow.insertCell(0);
    nameCell1.innerHTML = "Name";
    var nameCell2 = nameRow.insertCell(1);
    nameCell2.innerHTML = "Nikhil";
    var emailRow = table.insertRow(1);
    var nameCell1 = nameRow.insertCell(0);
    nameCell1.innerHTML = "Name";
     }
    function checkform()
    {
        var f = document.forms["frm"].elements;
        var cansubmit = true;
        for (var i = 0; i < f.length; i++) {
            if (f[i].value.length == 0) cansubmit = false;
        }
        if (cansubmit) {
            document.getElementById('submitbutton').disabled = !cansubmit;
        }
    }

